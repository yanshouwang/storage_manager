// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.yanshouwang.storage_manager

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class StorageVolume (
  val description: String,
  val mediaStoreVolumeName: String? = null,
  val state: String,
  val isEmulated: Boolean,
  val isPrimary: Boolean,
  val isRemovable: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): StorageVolume {
      val description = list[0] as String
      val mediaStoreVolumeName = list[1] as String?
      val state = list[2] as String
      val isEmulated = list[3] as Boolean
      val isPrimary = list[4] as Boolean
      val isRemovable = list[5] as Boolean
      return StorageVolume(description, mediaStoreVolumeName, state, isEmulated, isPrimary, isRemovable)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      description,
      mediaStoreVolumeName,
      state,
      isEmulated,
      isPrimary,
      isRemovable,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object StorageManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          StorageVolume.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is StorageVolume -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface StorageManagerHostApi {
  /**
   * Return the list of shared/external storage volumes currently available to the calling user.
   *
   * These storage volumes are actively attached to the device, but may be in any mount state, as returned by
   * StorageVolume#getState(). Returns both the primary shared storage device and any attached external volumes,
   * including SD cards and USB drives.
   */
  fun getStorageVolumes(): List<StorageVolume>
  /**
   * Registers the given callback to listen for StorageVolume changes.
   *
   * For example, this can be used to detect when a volume changes to the Environment#MEDIA_MOUNTED or
   * Environment#MEDIA_UNMOUNTED states.
   */
  fun registerStorageVolumeCallback()
  /** Unregisters the given callback from listening for StorageVolume changes. */
  fun unregisterStorageVolumeCallback()

  companion object {
    /** The codec used by StorageManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StorageManagerHostApiCodec
    }
    /** Sets up an instance of `StorageManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: StorageManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StorageManagerHostApi.getStorageVolumes", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getStorageVolumes())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StorageManagerHostApi.registerStorageVolumeCallback", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.registerStorageVolumeCallback()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StorageManagerHostApi.unregisterStorageVolumeCallback", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.unregisterStorageVolumeCallback()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object StorageManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          StorageVolume.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is StorageVolume -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class StorageManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by StorageManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StorageManagerFlutterApiCodec
    }
  }
  /**
   * Called when StorageVolume#getState() changes, such as changing to the Environment#MEDIA_MOUNTED or
   * Environment#MEDIA_UNMOUNTED states.
   *
   * The given argument is a snapshot in time and can be used to process events in the order they occurred, or you can
   * call StorageManager#getStorageVolumes() to observe the latest value.
   */
  fun onStateChanged(volumeArg: StorageVolume, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.StorageManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(volumeArg)) {
      callback()
    }
  }
}
