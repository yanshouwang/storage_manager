// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:storage_manager/storage_manager_pigeon.dart';

class _TestStorageManagerHostApiCodec extends StandardMessageCodec {
  const _TestStorageManagerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StorageVolume) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return StorageVolume.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TestStorageManagerHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = _TestStorageManagerHostApiCodec();

  /// Return the list of shared/external storage volumes currently available to the calling user.
  ///
  /// These storage volumes are actively attached to the device, but may be in any mount state, as returned by
  /// StorageVolume#getState(). Returns both the primary shared storage device and any attached external volumes,
  /// including SD cards and USB drives.
  List<StorageVolume?> getStorageVolumes();

  /// Registers the given callback to listen for StorageVolume changes.
  ///
  /// For example, this can be used to detect when a volume changes to the Environment#MEDIA_MOUNTED or
  /// Environment#MEDIA_UNMOUNTED states.
  void registerStorageVolumeCallback();

  /// Unregisters the given callback from listening for StorageVolume changes.
  void unregisterStorageVolumeCallback();

  static void setup(TestStorageManagerHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StorageManagerHostApi.getStorageVolumes', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          // ignore message
          final List<StorageVolume?> output = api.getStorageVolumes();
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StorageManagerHostApi.registerStorageVolumeCallback', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          // ignore message
          api.registerStorageVolumeCallback();
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StorageManagerHostApi.unregisterStorageVolumeCallback', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          // ignore message
          api.unregisterStorageVolumeCallback();
          return <Object?>[];
        });
      }
    }
  }
}
