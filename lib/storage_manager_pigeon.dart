// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class StorageVolume {
  StorageVolume({
    required this.description,
    this.mediaStoreVolumeName,
    required this.state,
    required this.isEmulated,
    required this.isPrimary,
    required this.isRemovable,
  });

  String description;

  String? mediaStoreVolumeName;

  String state;

  bool isEmulated;

  bool isPrimary;

  bool isRemovable;

  Object encode() {
    return <Object?>[
      description,
      mediaStoreVolumeName,
      state,
      isEmulated,
      isPrimary,
      isRemovable,
    ];
  }

  static StorageVolume decode(Object result) {
    result as List<Object?>;
    return StorageVolume(
      description: result[0]! as String,
      mediaStoreVolumeName: result[1] as String?,
      state: result[2]! as String,
      isEmulated: result[3]! as bool,
      isPrimary: result[4]! as bool,
      isRemovable: result[5]! as bool,
    );
  }
}

class _StorageManagerHostApiCodec extends StandardMessageCodec {
  const _StorageManagerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StorageVolume) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return StorageVolume.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class StorageManagerHostApi {
  /// Constructor for [StorageManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  StorageManagerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _StorageManagerHostApiCodec();

  /// Return the list of shared/external storage volumes currently available to the calling user.
  ///
  /// These storage volumes are actively attached to the device, but may be in any mount state, as returned by
  /// StorageVolume#getState(). Returns both the primary shared storage device and any attached external volumes,
  /// including SD cards and USB drives.
  Future<List<StorageVolume?>> getStorageVolumes() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.StorageManagerHostApi.getStorageVolumes', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<StorageVolume?>();
    }
  }

  /// Registers the given callback to listen for StorageVolume changes.
  ///
  /// For example, this can be used to detect when a volume changes to the Environment#MEDIA_MOUNTED or
  /// Environment#MEDIA_UNMOUNTED states.
  Future<void> registerStorageVolumeCallback() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.StorageManagerHostApi.registerStorageVolumeCallback', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Unregisters the given callback from listening for StorageVolume changes.
  Future<void> unregisterStorageVolumeCallback() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.StorageManagerHostApi.unregisterStorageVolumeCallback', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _StorageManagerFlutterApiCodec extends StandardMessageCodec {
  const _StorageManagerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StorageVolume) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return StorageVolume.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class StorageManagerFlutterApi {
  static const MessageCodec<Object?> codec = _StorageManagerFlutterApiCodec();

  /// Called when StorageVolume#getState() changes, such as changing to the Environment#MEDIA_MOUNTED or
  /// Environment#MEDIA_UNMOUNTED states.
  ///
  /// The given argument is a snapshot in time and can be used to process events in the order they occurred, or you can
  /// call StorageManager#getStorageVolumes() to observe the latest value.
  void onStateChanged(StorageVolume volume);

  static void setup(StorageManagerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.StorageManagerFlutterApi.onStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.StorageManagerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final StorageVolume? arg_volume = (args[0] as StorageVolume?);
          assert(arg_volume != null,
              'Argument for dev.flutter.pigeon.StorageManagerFlutterApi.onStateChanged was null, expected non-null StorageVolume.');
          api.onStateChanged(arg_volume!);
          return;
        });
      }
    }
  }
}
